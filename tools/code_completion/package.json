{
  "name": "treehouse-code-completer",
  "displayName": "%displayName%",
  "description": "%description%",
  "version": "0.1.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/maliubiao/treehouse.git"
  },
  "publisher": "local-dev",
  "engines": {
    "vscode": "^1.102.0"
  },
  "l10n": "./l10n",
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "activationEvents": [
    "onCommand:treehouse-code-completer.generateCode"
  ],
  "main": "./dist/extension.js",
  "scripts": {
    "vscode:prepublish": "pnpm run l10n:generate && pnpm run compile",
    "compile": "pnpm run compile:extension && pnpm run compile:webview",
    "compile:extension": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node",
    "compile:webview": "node ./scripts/build-webview.js",
    "watch": "pnpm run watch:extension & pnpm run watch:webview",
    "watch:extension": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node --sourcemap --watch",
    "watch:webview": "node ./scripts/build-webview.js --watch",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:cancel": "jest --testNamePattern='cancellation|cancel'",
    "test:e2e": "node ./out/test/runTest.js",
    "lint": "tsc --noEmit",
    "package": "pnpm exec vsce package --no-dependencies",
    "l10n:generate": "vscode-l10n-dev generate"
  },
  "devDependencies": {
    "@types/i18next": "^13.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.19.9",
    "@types/vscode": "^1.102.0",
    "@vscode/l10n-dev": "^0.0.35",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^2.32.0",
    "esbuild": "^0.20.2",
    "jest": "^29.7.0",
    "ts-jest": "^29.4.0",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "fs-extra": "^11.3.0",
    "https-proxy-agent": "^7.0.6",
    "i18next": "^23.16.8",
    "openai": "^4.104.0"
  },
  "contributes": {
    "commands": [
      {
        "command": "treehouse-code-completer.generateCode",
        "title": "%commands.generateCode.title%"
      },
      {
        "command": "treehouse-code-completer.undoLastGeneration",
        "title": "%commands.undoLastGeneration.title%"
      },
      {
        "command": "treehouse-code-completer.openWebviewDeveloperTools",
        "title": "%commands.openWebviewDeveloperTools.title%"
      },
      {
        "command": "treehouse-code-completer.openSettings",
        "title": "%commands.openSettings.title%"
      },
      {
        "command": "treehouse-code-completer.acceptChanges",
        "title": "%commands.acceptChanges.title%",
        "icon": "$(check)"
      },
      {
        "command": "treehouse-code-completer.rejectChanges",
        "title": "%commands.rejectChanges.title%",
        "icon": "$(close)"
      }
    ],
    "keybindings": [
      {
        "command": "treehouse-code-completer.generateCode",
        "key": "ctrl+alt+i",
        "mac": "cmd+alt+i"
      },
      {
        "command": "treehouse-code-completer.acceptChanges",
        "key": "ctrl+alt+y",
        "mac": "cmd+alt+y",
        "when": "treehouseCodeCompleter.diffViewActive"
      },
      {
        "command": "treehouse-code-completer.rejectChanges",
        "key": "ctrl+alt+n",
        "mac": "cmd+alt+n",
        "when": "treehouseCodeCompleter.diffViewActive"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "editorHasSelection",
          "command": "treehouse-code-completer.generateCode",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "treehouse-code-completer.acceptChanges",
          "when": "resourceLangId == 'diff' && treehouseCodeCompleter.diffViewActive",
          "group": "navigation"
        },
        {
          "command": "treehouse-code-completer.rejectChanges",
          "when": "resourceLangId == 'diff' && treehouseCodeCompleter.diffViewActive",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "%configuration.title%",
      "properties": {
        "treehouseCodeCompleter.services": {
          "type": "array",
          "default": [],
          "description": "%configuration.services.description%",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "base_url": {
                "type": "string"
              },
              "model_name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "temperature": {
                "type": "number"
              },
              "max_tokens": {
                "type": "number"
              },
              "max_context_size": {
                "type": "number"
              },
              "timeout_seconds": {
                "type": "number",
                "default": 60,
                "description": "API request timeout in seconds."
              },
              "is_thinking": {
                "type": "boolean"
              },
              "price_1M_input": {
                "type": "number"
              },
              "price_1M_output": {
                "type": "number"
              },
              "supports_json_output": {
                "type": "boolean"
              }
            }
          }
        },
        "treehouseCodeCompleter.activeService": {
          "type": "string",
          "default": "",
          "description": "%configuration.activeService.description%"
        },
        "treehouseCodeCompleter.prompt.systemMessage": {
          "type": "string",
          "default": "You are an expert software architect and engineering partner. Your goal is to deeply understand the user's intent and provide the best possible code modification, including any necessary import statements.\n\nThe user will provide context including the full file, a specific block of code to modify, and potentially the file's existing import block. Your task is to analyze all context, infer the user's true goal, and generate the best solution.\n\nINPUT FORMAT:\nYour input will contain the user's instruction followed by one or two code blocks:\n1.  An optional `<IMPORTS_BLOCK>` containing the existing imports.\n2.  A mandatory `<CODE_TO_MODIFY>` containing the code the user wants to change.\n\nOUTPUT FORMAT:\nYou must provide your response in two corresponding blocks:\n1.  If you need to add, remove, or change imports, provide the complete, updated import block inside `<UPDATED_IMPORTS>` tags. If no changes are needed, OMIT this tag entirely.\n2.  Provide the new, rewritten code inside `<UPDATED_CODE>` tags. This tag is mandatory.\n\nEXAMPLE RESPONSE (if imports changed):\n<UPDATED_IMPORTS>\nimport React, { useState } from 'react';\n</UPDATED_IMPORTS>\n<UPDATED_CODE>\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};\n</UPDATED_CODE>\n\nEXAMPLE RESPONSE (if imports did NOT change):\n<UPDATED_CODE>\n// Refactored code goes here...\n</UPDATED_CODE>\n\nCRITICAL: Adhere strictly to this input/output format. Only include the raw code in your response tags, with no extra explanations.",
          "description": "%configuration.systemMessage.description%"
        },
        "treehouseCodeCompleter.prompt.rule": {
          "type": "string",
          "default": "Follow all existing coding conventions and style from the provided file content.",
          "description": "%configuration.rule.description%"
        },
        "treehouseCodeCompleter.prompt.usePrefixCompletion": {
          "type": "boolean",
          "default": false,
          "description": "%configuration.usePrefixCompletion.description%"
        },
        "treehouseCodeCompleter.output.streamingResults": {
          "type": "boolean",
          "default": true,
          "description": "%configuration.output.streamingResults.description%"
        },
        "treehouseCodeCompleter.debug.streamingChunks": {
          "type": "boolean",
          "default": false,
          "description": "%configuration.debug.streamingChunks.description%"
        }
      }
    },
    "context": [
      {
        "name": "treehouseCodeCompleter.diffViewActive",
        "description": "%context.diffViewActive.description%",
        "type": "boolean"
      }
    ]
  }
}