{
  "name": "treehouse-code-completer",
  "displayName": "Treehouse Code Completer",
  "description": "Uses AI to complete or refactor selected code blocks via OpenAI-compatible APIs.",
  "version": "0.1.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/maliubiao/treehouse.git"
  },
  "publisher": "local-dev",
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "activationEvents": [
    "onCommand:treehouse-code-completer.generateCode"
  ],
  "main": "./dist/extension.js",
  "scripts": {
    "vscode:prepublish": "pnpm run compile",
    "compile": "pnpm run compile:extension && pnpm run compile:webview",
    "compile:extension": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node",
    "compile:webview": "node ./scripts/build-webview.js",
    "watch": "pnpm run watch:extension & pnpm run watch:webview",
    "watch:extension": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node --sourcemap --watch",
    "watch:webview": "node ./scripts/build-webview.js --watch",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:cancel": "jest --testNamePattern='cancellation|cancel'",
    "test:e2e": "node ./out/test/runTest.js",
    "lint": "tsc --noEmit",
    "package": "pnpm exec vsce package --no-dependencies"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^20.19.8",
    "@types/vscode": "^1.102.0",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^2.32.0",
    "esbuild": "^0.20.2",
    "jest": "^29.7.0",
    "ts-jest": "^29.4.0",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "openai": "^4.104.0"
  },
  "contributes": {
    "commands": [
      {
        "command": "treehouse-code-completer.generateCode",
        "title": "Treehouse: Generate/Refactor Code"
      },
      {
        "command": "treehouse-code-completer.undoLastGeneration",
        "title": "Treehouse: Undo Last Generation"
      },
      {
        "command": "treehouse-code-completer.openWebviewDeveloperTools",
        "title": "Treehouse: Open Webview Developer Tools"
      },
      {
        "command": "treehouse-code-completer.openSettings",
        "title": "Treehouse: Open Settings"
      },
      {
        "command": "treehouse-code-completer.acceptChanges",
        "title": "Treehouse: Accept AI Suggestion",
        "icon": "$(check)"
      },
      {
        "command": "treehouse-code-completer.rejectChanges",
        "title": "Treehouse: Reject AI Suggestion",
        "icon": "$(close)"
      }
    ],
    "keybindings": [
      {
        "command": "treehouse-code-completer.generateCode",
        "key": "ctrl+alt+i",
        "mac": "cmd+alt+i"
      },
      {
        "command": "treehouse-code-completer.acceptChanges",
        "key": "ctrl+alt+y",
        "mac": "cmd+alt+y",
        "when": "treehouseCodeCompleter.diffViewActive"
      },
      {
        "command": "treehouse-code-completer.rejectChanges",
        "key": "ctrl+alt+n",
        "mac": "cmd+alt+n",
        "when": "treehouseCodeCompleter.diffViewActive"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "editorHasSelection",
          "command": "treehouse-code-completer.generateCode",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "treehouse-code-completer.acceptChanges",
          "when": "resourceLangId == 'diff' && treehouseCodeCompleter.diffViewActive",
          "group": "navigation"
        },
        {
          "command": "treehouse-code-completer.rejectChanges",
          "when": "resourceLangId == 'diff' && treehouseCodeCompleter.diffViewActive",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "Treehouse Code Completer",
      "properties": {
        "treehouseCodeCompleter.services": {
          "type": "array",
          "default": [],
          "description": "A list of AI service configurations for Treehouse Code Completer.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "base_url": {
                "type": "string"
              },
              "model_name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "temperature": {
                "type": "number"
              },
              "max_tokens": {
                "type": "number"
              },
              "max_context_size": {
                "type": "number"
              },
              "timeout_seconds": {
                "type": "number",
                "default": 60,
                "description": "API request timeout in seconds."
              },
              "is_thinking": {
                "type": "boolean"
              },
              "price_1M_input": {
                "type": "number"
              },
              "price_1M_output": {
                "type": "number"
              },
              "supports_json_output": {
                "type": "boolean"
              }
            }
          }
        },
        "treehouseCodeCompleter.activeService": {
          "type": "string",
          "default": "",
          "description": "The name of the active AI service configuration for Treehouse Code Completer."
        },
        "treehouseCodeCompleter.prompt.systemMessage": {
          "type": "string",
          "default": "You are an expert software architect and engineering partner. Your goal is to deeply understand the user's intent and provide the best possible code modification, including any necessary import statements.\n\nThe user will provide context including the full file, a specific block of code to modify, and potentially the file's existing import block. Your task is to analyze all context, infer the user's true goal, and generate the best solution.\n\nINPUT FORMAT:\nYour input will contain the user's instruction followed by one or two code blocks:\n1.  An optional `<IMPORTS_BLOCK>` containing the existing imports.\n2.  A mandatory `<CODE_TO_MODIFY>` containing the code the user wants to change.\n\nOUTPUT FORMAT:\nYou must provide your response in two corresponding blocks:\n1.  If you need to add, remove, or change imports, provide the complete, updated import block inside `<UPDATED_IMPORTS>` tags. If no changes are needed, OMIT this tag entirely.\n2.  Provide the new, rewritten code inside `<UPDATED_CODE>` tags. This tag is mandatory.\n\nEXAMPLE RESPONSE (if imports changed):\n<UPDATED_IMPORTS>\nimport React, { useState } from 'react';\n</UPDATED_IMPORTS>\n<UPDATED_CODE>\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};\n</UPDATED_CODE>\n\nEXAMPLE RESPONSE (if imports did NOT change):\n<UPDATED_CODE>\n// Refactored code goes here...\n</UPDATED_CODE>\n\nCRITICAL: Adhere strictly to this input/output format. Only include the raw code in your response tags, with no extra explanations.",
          "description": "The master system prompt that guides the AI's behavior. It instructs the AI to act as an expert engineering partner, inferring user intent from context to provide the highest quality code."
        },
        "treehouseCodeCompleter.prompt.rule": {
          "type": "string",
          "default": "Follow all existing coding conventions and style from the provided file content.",
          "description": "A custom rule or guideline to be appended to every prompt, e.g., 'All unit tests must be written using the `unittest` framework'."
        },
        "treehouseCodeCompleter.prompt.usePrefixCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Enable this for models that use a specific prefix-based completion format (e.g., some versions of DeepSeek Coder Instruct). If true, the prompt is sent in a special format. For most standard chat models (like GPT series), this should be false."
        },
        "treehouseCodeCompleter.output.streamingResults": {
          "type": "boolean",
          "default": true,
          "description": "Save and display streaming results in terminal on completion. When enabled, all chunks of AI responses are accumulated and printed to the terminal when generation is complete."
        },
        "treehouseCodeCompleter.debug.streamingChunks": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging for each streaming chunk received from the AI service. Only use for troubleshooting as this will generate a lot of logs."
        }
      }
    },
    "context": [
      {
        "name": "treehouseCodeCompleter.diffViewActive",
        "description": "True when the Treehouse Code Completer diff view is active and awaiting user action.",
        "type": "boolean"
      }
    ]
  }
}