{
    "displayName": "树屋代码补全器",
    "description": "使用AI通过兼容OpenAI的API来补全或重构选定的代码块。",
    "commands.generateCode.title": "树屋：生成/重构代码",
    "commands.undoLastGeneration.title": "树屋：撤销上次生成",
    "commands.openWebviewDeveloperTools.title": "树屋：打开Webview开发者工具",
    "commands.openSettings.title": "树屋：打开设置",
    "commands.acceptChanges.title": "树屋：接受AI建议",
    "commands.rejectChanges.title": "树屋：拒绝AI建议",
    "configuration.title": "树屋代码补全器",
    "configuration.services.description": "树屋代码补全器的AI服务配置列表。",
    "configuration.activeService.description": "树屋代码补全器当前激活的AI服务配置名称。",
    "configuration.systemMessage.description": "指导AI行为的主系统提示。它指示AI扮演专家工程伙伴的角色，从上下文中推断用户意图以提供最高质量的代码。",
    "configuration.rule.description": "附加到每个提示的自定义规则或指南，例如：'所有单元测试必须使用 `unittest` 框架编写'。",
    "configuration.usePrefixCompletion.description": "为使用特定基于前缀的补全格式（例如，某些版本的DeepSeek Coder Instruct）的模型启用此功能。如果为true，则提示以特殊格式发送。对于大多数标准聊天模型（如GPT系列），此项应为false。",
    "configuration.output.streamingResults.description": "完成后在终端中保存并显示流式结果。启用后，所有AI响应的块都将被累积并在生成完成时打印到终端。",
    "configuration.debug.streamingChunks.description": "为从AI服务接收的每个流式块启用调试日志记录。仅用于故障排除，因为这会产生大量日志。",
    "context.diffViewActive.description": "当树屋代码补全器差异视图处于活动状态并等待用户操作时为true。",
    "Treehouse Code Completer is now active.": "树屋代码补全器已激活。",
    "No active Treehouse Code Completer webview to inspect.": "没有活动的树屋代码补全器Webview可供检查。",
    "Enter your instruction for the AI": "请输入您对AI的指令",
    "e.g., \"Refactor this to be more efficient\" or \"Add JSDoc comments\"": "例如：“重构此代码以提高效率”或“添加JSDoc注释”",
    "Treehouse Completer: {0}": "树屋补全器：{0}",
    "Treehouse Completer Error: {0}": "树屋补全器错误：{0}",
    "Retry": "重试",
    "AI service configuration with an API key is required.": "需要包含API密钥的AI服务配置。",
    "You are an expert software architect and engineering partner. Your goal is to deeply understand the user's intent and provide the best possible code modification. The user will provide the full content of a file, a specific block of code to be changed, and an instruction.\n\nYour task is to:\n1.  **Analyze the Context:** Use the full file content to understand its purpose, existing design patterns, variable naming, and overall coding style.\n2.  **Infer the Intent:** The user's instruction is a starting point, not a rigid command. Deduce the true goal behind their request.\n3.  **Generate the Best Solution:** Rewrite the specified code block to elegantly and robustly achieve the user's inferred goal. Your code should seamlessly integrate with the existing codebase.\n\nIMPORTANT: Your response MUST contain the modified code in an <UPDATED_CODE> block. If you are adding or changing imports, you MUST place them in a separate <UPDATED_IMPORTS> block that comes before the <UPDATED_CODE> block.\n\nExample:\n<UPDATED_IMPORTS>\nimport { useState } from 'react';\n</UPDATED_IMPORTS>\n\n<UPDATED_CODE>\nconst [count, setCount] = useState(0);\n</UPDATED_CODE>": "您是一位专家级软件架构师和工程伙伴。您的目标是深入理解用户的意图，并提供尽可能最佳的代码修改。用户将提供文件的全部内容、要更改的特定代码块以及一条指令。\n\n您的任务是：\n1.  **分析上下文：** 利用完整的文件内容来理解其用途、现有设计模式、变量命名和整体编码风格。\n2.  **推断意图：** 用户的指令是一个起点，而不是僵化的命令。推断出他们请求背后的真正目标。\n3.  **生成最佳解决方案：** 重写指定的代码块，以优雅和健壮的方式实现用户推断出的目标。您的代码应与现有代码库无缝集成。\n\n重要提示：您的响应必须在 <UPDATED_CODE> 块中包含修改后的代码。如果您要添加或更改导入，必须将它们放在一个单独的、位于 <UPDATED_CODE> 块之前的 <UPDATED_IMPORTS> 块中。\n\n示例：\n<UPDATED_IMPORTS>\nimport { useState } from 'react';\n</UPDATED_IMPORTS>\n\n<UPDATED_CODE>\nconst [count, setCount] = useState(0);\n</UPDATED_CODE>",
    "No active AI service configured.": "未配置活动的AI服务。",
    "The request timed out after {0} seconds.\nStack: {1}": "请求在 {0} 秒后超时。\n堆栈: {1}",
    "API request failed with status {0}: {1}\nStack: {2}": "API请求失败，状态码 {0}: {1}\n堆栈: {2}",
    "Failed to communicate with the API. Check your network connection and configuration.\nError: {0}\nStack: {1}": "无法与API通信。请检查您的网络连接和配置。\n错误: {0}\n堆栈: {1}",
    "API Error: {0} {1} - {2}\nStack: {3}": "API 错误: {0} {1} - {2}\n堆栈: {3}",
    "Failed to communicate with the API: {0}\nStack: {1}": "无法与API通信: {0}\n堆栈: {1}",
    "Respond with only the word 'test'": "仅用 'test' 一词回应",
    "Connection successful.": "连接成功。",
    "Received an unexpected response: \"{0}\"": "收到意外响应：\"{0}\"",
    "Request timed out after {0}s.\nStack: {1}": "请求在 {0} 秒后超时。\n堆栈: {1}",
    "An unknown error occurred: {0}\nStack: {1}": "发生未知错误: {0}\n堆栈: {1}",
    "AI response was empty.": "AI响应为空。",
    "No active Treehouse AI service is configured. Please set up a service to continue.": "没有配置活动的树屋AI服务。请设置一个服务以继续。",
    "Open Settings": "打开设置",
    "Code generation is not available in terminals, debug console, or output panels.": "代码生成在终端、调试控制台或输出面板中不可用。",
    "Place your cursor or select code in a file to generate code.": "请在文件中放置光标或选择代码以生成代码。",
    "Treehouse AI is working...": "树屋AI正在工作中...",
    "Initializing...": "正在初始化...",
    "Finalizing response...": "正在完成响应...",
    "AI generation request timed out after 2 minutes.": "AI生成请求在2分钟后超时。",
    "Operation cancelled by user.": "操作已被用户取消。",
    "✅ Code generation completed | {0} tokens{1}": "✅ 代码生成完成 | {0} tokens{1}",
    "Operation cancelled.": "操作已取消。",
    "Show Details": "显示详情",
    "AI suggestion ready. Use {0} to accept or {1} to reject.": "AI建议已就绪。使用 {0} 接受或 {1} 拒绝。",
    "Changes have been applied.": "更改已应用。",
    "Failed to apply changes": "应用更改失败",
    "Failed to apply changes: {0}": "应用更改失败: {0}",
    "Changes were rejected.": "更改已被拒绝。",
    "No AI generation to undo.": "没有可撤销的AI生成。",
    "Last AI generation has been reverted.": "上次的AI生成已被还原。",
    "Failed to undo last edit: {0}": "撤销上次编辑失败: {0}",
    "Treehouse AI Service Configurations": "树屋AI服务配置",
    "Service '{0}' saved.": "服务 '{0}' 已保存。",
    "Service '{0}' deleted.": "服务 '{0}' 已删除。",
    "Service '{0}' is now active.": "服务 '{0}' 已激活。",
    "Imported {0} services.": "已导入 {0} 个服务。",
    "System prompt saved.": "系统提示已保存。",
    "Prompt rule saved.": "提示规则已保存。",
    "Error: Service '{0}' not found.": "错误：未找到服务 '{0}'。",
    "Error: {0}": "错误：{0}",
    "mainTitle": "树屋AI服务配置",
    "servicesTitle": "服务",
    "addNewService": "添加新服务",
    "importExportTitle": "导入/导出所有服务",
    "importExportPlaceholder": "在此处粘贴服务配置数组...",
    "importAll": "全部导入",
    "exportAll": "全部导出",
    "promptsTitle": "提示与规则",
    "systemPromptLabel": "系统提示 (主指令)",
    "saveSystemPrompt": "保存系统提示",
    "customRuleLabel": "自定义规则 (附加到每个请求)",
    "saveCustomRule": "保存规则",
    "playgroundTitle": "演练场",
    "playgroundServiceLabel": "选择服务",
    "playgroundPromptLabel": "提示",
    "playgroundPromptPlaceholder": "在此输入您的提示...",
    "playgroundSend": "发送",
    "playgroundResponseLabel": "响应",
    "editModalTitle": "编辑服务",
    "addModalTitle": "添加新服务",
    "modalImportLabel": "从JSON导入",
    "modalImportPlaceholder": "在此处粘贴单个服务的JSON配置...",
    "modalImportButton": "导入并填充表单",
    "serviceNameLabel": "服务名称",
    "modelNameLabel": "模型名称",
    "baseUrlLabel": "基础URL",
    "apiKeyLabel": "API密钥",
    "temperatureLabel": "温度",
    "maxTokensLabel": "最大令牌数",
    "maxContextSizeLabel": "最大上下文大小",
    "timeoutLabel": "超时 (秒)",
    "priceInputLabel": "价格/1M输入 ($)",
    "priceOutputLabel": "价格/1M输出 ($)",
    "supportsJsonLabel": "支持JSON输出",
    "testConnectionButton": "测试连接",
    "saveButton": "保存",
    "cancelButton": "取消",
    "thinking": "思考中...",
    "noServicesConfigured": "未配置任何服务。请添加一个新服务或导入配置。",
    "activeBadge": "当前",
    "selectButton": "选择",
    "editButton": "编辑",
    "deleteButton": "删除",
    "noServicesAvailable": "无可用服务",
    "invalidJsonServices": "服务数组的JSON格式无效。",
    "invalidJsonService": "单个服务的JSON格式无效。",
    "connectionSuccessful": "✔️ 连接成功！",
    "connectionFailed": "❌ {0}"
}