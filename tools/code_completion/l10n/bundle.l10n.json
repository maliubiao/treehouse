{
    "displayName": "Treehouse Code Completer",
    "description": "Uses AI to complete or refactor selected code blocks via OpenAI-compatible APIs.",
    "commands.generateCode.title": "Treehouse: Generate/Refactor Code",
    "commands.undoLastGeneration.title": "Treehouse: Undo Last Generation",
    "commands.openWebviewDeveloperTools.title": "Treehouse: Open Webview Developer Tools",
    "commands.openSettings.title": "Treehouse: Open Settings",
    "commands.acceptChanges.title": "Treehouse: Accept AI Suggestion",
    "commands.rejectChanges.title": "Treehouse: Reject AI Suggestion",
    "configuration.title": "Treehouse Code Completer",
    "configuration.services.description": "A list of AI service configurations for Treehouse Code Completer.",
    "configuration.activeService.description": "The name of the active AI service configuration for Treehouse Code Completer.",
    "configuration.systemMessage.description": "The master system prompt that guides the AI's behavior. It instructs the AI to act as an expert engineering partner, inferring user intent from context to provide the highest quality code.",
    "configuration.rule.description": "A custom rule or guideline to be appended to every prompt, e.g., 'All unit tests must be written using the `unittest` framework'.",
    "configuration.usePrefixCompletion.description": "Enable this for models that use a specific prefix-based completion format (e.g., some versions of DeepSeek Coder Instruct). If true, the prompt is sent in a special format. For most standard chat models (like GPT series), this should be false.",
    "configuration.output.streamingResults.description": "Save and display streaming results in terminal on completion. When enabled, all chunks of AI responses are accumulated and printed to the terminal when generation is complete.",
    "configuration.debug.streamingChunks.description": "Enable debug logging for each streaming chunk received from the AI service. Only use for troubleshooting as this will generate a lot of logs.",
    "context.diffViewActive.description": "True when the Treehouse Code Completer diff view is active and awaiting user action.",
    "Treehouse Code Completer is now active.": "Treehouse Code Completer is now active.",
    "No active Treehouse Code Completer webview to inspect.": "No active Treehouse Code Completer webview to inspect.",
    "Enter your instruction for the AI": "Enter your instruction for the AI",
    "e.g., \"Refactor this to be more efficient\" or \"Add JSDoc comments\"": "e.g., \"Refactor this to be more efficient\" or \"Add JSDoc comments\"",
    "Treehouse Completer: {0}": "Treehouse Completer: {0}",
    "Treehouse Completer Error: {0}": "Treehouse Completer Error: {0}",
    "Retry": "Retry",
    "AI service configuration with an API key is required.": "AI service configuration with an API key is required.",
    "You are an expert software architect and engineering partner. Your goal is to deeply understand the user's intent and provide the best possible code modification. The user will provide the full content of a file, a specific block of code to be changed, and an instruction.\n\nYour task is to:\n1.  **Analyze the Context:** Use the full file content to understand its purpose, existing design patterns, variable naming, and overall coding style.\n2.  **Infer the Intent:** The user's instruction is a starting point, not a rigid command. Deduce the true goal behind their request.\n3.  **Generate the Best Solution:** Rewrite the specified code block to elegantly and robustly achieve the user's inferred goal. Your code should seamlessly integrate with the existing codebase.\n\nIMPORTANT: Your response MUST contain the modified code in an <UPDATED_CODE> block. If you are adding or changing imports, you MUST place them in a separate <UPDATED_IMPORTS> block that comes before the <UPDATED_CODE> block.\n\nExample:\n<UPDATED_IMPORTS>\nimport { useState } from 'react';\n</UPDATED_IMPORTS>\n\n<UPDATED_CODE>\nconst [count, setCount] = useState(0);\n</UPDATED_CODE>": "You are an expert software architect and engineering partner. Your goal is to deeply understand the user's intent and provide the best possible code modification. The user will provide the full content of a file, a specific block of code to be changed, and an instruction.\n\nYour task is to:\n1.  **Analyze the Context:** Use the full file content to understand its purpose, existing design patterns, variable naming, and overall coding style.\n2.  **Infer the Intent:** The user's instruction is a starting point, not a rigid command. Deduce the true goal behind their request.\n3.  **Generate the Best Solution:** Rewrite the specified code block to elegantly and robustly achieve the user's inferred goal. Your code should seamlessly integrate with the existing codebase.\n\nIMPORTANT: Your response MUST contain the modified code in an <UPDATED_CODE> block. If you are adding or changing imports, you MUST place them in a separate <UPDATED_IMPORTS> block that comes before the <UPDATED_CODE> block.\n\nExample:\n<UPDATED_IMPORTS>\nimport { useState } from 'react';\n</UPDATED_IMPORTS>\n\n<UPDATED_CODE>\nconst [count, setCount] = useState(0);\n</UPDATED_CODE>",
    "No active AI service configured.": "No active AI service configured.",
    "The request timed out after {0} seconds.\nStack: {1}": "The request timed out after {0} seconds.\nStack: {1}",
    "API request failed with status {0}: {1}\nStack: {2}": "API request failed with status {0}: {1}\nStack: {2}",
    "Failed to communicate with the API. Check your network connection and configuration.\nError: {0}\nStack: {1}": "Failed to communicate with the API. Check your network connection and configuration.\nError: {0}\nStack: {1}",
    "The request timed out after {0} seconds.\nStack: {1}": "The request timed out after {0} seconds.\nStack: {1}",
    "API Error: {0} {1} - {2}\nStack: {3}": "API Error: {0} {1} - {2}\nStack: {3}",
    "Failed to communicate with the API: {0}\nStack: {1}": "Failed to communicate with the API: {0}\nStack: {1}",
    "Respond with only the word 'test'": "Respond with only the word 'test'",
    "Connection successful.": "Connection successful.",
    "Received an unexpected response: \"{0}\"": "Received an unexpected response: \"{0}\"",
    "Request timed out after {0}s.\nStack: {1}": "Request timed out after {0}s.\nStack: {1}",
    "An unknown error occurred: {0}\nStack: {1}": "An unknown error occurred: {0}\nStack: {1}",
    "AI response was empty.": "AI response was empty.",
    "No active Treehouse AI service is configured. Please set up a service to continue.": "No active Treehouse AI service is configured. Please set up a service to continue.",
    "Open Settings": "Open Settings",
    "Code generation is not available in terminals, debug console, or output panels.": "Code generation is not available in terminals, debug console, or output panels.",
    "Place your cursor or select code in a file to generate code.": "Place your cursor or select code in a file to generate code.",
    "Treehouse AI is working...": "Treehouse AI is working...",
    "Initializing...": "Initializing...",
    "Finalizing response...": "Finalizing response...",
    "AI generation request timed out after 2 minutes.": "AI generation request timed out after 2 minutes.",
    "Operation cancelled by user.": "Operation cancelled by user.",
    "✅ Code generation completed | {0} tokens{1}": "✅ Code generation completed | {0} tokens{1}",
    "Operation cancelled.": "Operation cancelled.",
    "Treehouse Completer Error: {0}": "Treehouse Completer Error: {0}",
    "Show Details": "Show Details",
    "AI suggestion ready. Use {0} to accept or {1} to reject.": "AI suggestion ready. Use {0} to accept or {1} to reject.",
    "Changes have been applied.": "Changes have been applied.",
    "Failed to apply changes": "Failed to apply changes",
    "Failed to apply changes: {0}": "Failed to apply changes: {0}",
    "Changes were rejected.": "Changes were rejected.",
    "No AI generation to undo.": "No AI generation to undo.",
    "Last AI generation has been reverted.": "Last AI generation has been reverted.",
    "Failed to undo last edit: {0}": "Failed to undo last edit: {0}",
    "Treehouse AI Service Configurations": "Treehouse AI Service Configurations",
    "Service '{0}' saved.": "Service '{0}' saved.",
    "Service '{0}' deleted.": "Service '{0}' deleted.",
    "Service '{0}' is now active.": "Service '{0}' is now active.",
    "Imported {0} services.": "Imported {0} services.",
    "System prompt saved.": "System prompt saved.",
    "Prompt rule saved.": "Prompt rule saved.",
    "Error: Service '{0}' not found.": "Error: Service '{0}' not found.",
    "Error: {0}": "Error: {0}",
    "mainTitle": "Treehouse AI Service Configurations",
    "servicesTitle": "Services",
    "addNewService": "Add New Service",
    "importExportTitle": "Import/Export All Services",
    "importExportPlaceholder": "Paste an array of service configs here...",
    "importAll": "Import All",
    "exportAll": "Export All",
    "promptsTitle": "Prompts & Rules",
    "systemPromptLabel": "System Prompt (Master Instruction)",
    "saveSystemPrompt": "Save System Prompt",
    "customRuleLabel": "Custom Rule (Appended to every request)",
    "saveCustomRule": "Save Rule",
    "playgroundTitle": "Playground",
    "playgroundServiceLabel": "Select Service",
    "playgroundPromptLabel": "Prompt",
    "playgroundPromptPlaceholder": "Enter your prompt here...",
    "playgroundSend": "Send",
    "playgroundResponseLabel": "Response",
    "editModalTitle": "Edit Service",
    "addModalTitle": "Add New Service",
    "modalImportLabel": "Import from JSON",
    "modalImportPlaceholder": "Paste a single service JSON config here...",
    "modalImportButton": "Import and Fill Form",
    "serviceNameLabel": "Service Name",
    "modelNameLabel": "Model Name",
    "baseUrlLabel": "Base URL",
    "apiKeyLabel": "API Key",
    "temperatureLabel": "Temperature",
    "maxTokensLabel": "Max Tokens",
    "maxContextSizeLabel": "Max Context Size",
    "timeoutLabel": "Timeout (seconds)",
    "priceInputLabel": "Price/1M Input ($)",
    "priceOutputLabel": "Price/1M Output ($)",
    "supportsJsonLabel": "Supports JSON Output",
    "testConnectionButton": "Test Connection",
    "saveButton": "Save",
    "cancelButton": "Cancel",
    "thinking": "Thinking...",
    "noServicesConfigured": "No services configured. Add a new service or import a configuration.",
    "activeBadge": "Active",
    "selectButton": "Select",
    "editButton": "Edit",
    "deleteButton": "Delete",
    "noServicesAvailable": "No services available",
    "invalidJsonServices": "Invalid JSON format for services array.",
    "invalidJsonService": "Invalid JSON format for single service.",
    "connectionSuccessful": "✔️ Connection successful!",
    "connectionFailed": "❌ {0}"
}